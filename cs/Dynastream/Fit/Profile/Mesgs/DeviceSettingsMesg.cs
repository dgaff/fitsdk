#region Copyright
////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2015 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 15.20Release
// Tag = development-akw-15.20.00-0
////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;


namespace Dynastream.Fit
{
   /// <summary>
   /// Implements the DeviceSettings profile message.
   /// </summary>  
   public class DeviceSettingsMesg : Mesg 
   {    
      #region Fields     
      #endregion

      #region Constructors                 
      public DeviceSettingsMesg() : base(Profile.mesgs[Profile.DeviceSettingsIndex])               
      {                 
      }
      
      public DeviceSettingsMesg(Mesg mesg) : base(mesg)
      {
      }
      #endregion // Constructors

      #region Methods    
      ///<summary>      
      /// Retrieves the ActiveTimeZone field
      /// Comment: Index into time zone arrays.</summary>
      /// <returns>Returns nullable byte representing the ActiveTimeZone field</returns>      
      public byte? GetActiveTimeZone()   
      {                
         return (byte?)GetFieldValue(0, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set ActiveTimeZone field
      /// Comment: Index into time zone arrays.</summary>
      /// <param name="activeTimeZone_">Nullable field value to be set</param>      
      public void SetActiveTimeZone(byte? activeTimeZone_) 
      {  
         SetFieldValue(0, 0, activeTimeZone_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the UtcOffset field
      /// Comment: Offset from system time. Required to convert timestamp from system time to UTC.</summary>
      /// <returns>Returns nullable uint representing the UtcOffset field</returns>      
      public uint? GetUtcOffset()   
      {                
         return (uint?)GetFieldValue(1, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set UtcOffset field
      /// Comment: Offset from system time. Required to convert timestamp from system time to UTC.</summary>
      /// <param name="utcOffset_">Nullable field value to be set</param>      
      public void SetUtcOffset(uint? utcOffset_) 
      {  
         SetFieldValue(1, 0, utcOffset_, Fit.SubfieldIndexMainField);
      }
          
      
      /// <summary>
      /// 
      /// </summary>  
      /// <returns>returns number of elements in field TimeZoneOffset</returns>      
      public int GetNumTimeZoneOffset() 
      {
         return GetNumFieldValues(5, Fit.SubfieldIndexMainField);
      }

      ///<summary>      
      /// Retrieves the TimeZoneOffset field
      /// Units: hr
      /// Comment: timezone offset in 1/4 hour increments</summary>
      /// <param name="index">0 based index of TimeZoneOffset element to retrieve</param>
      /// <returns>Returns nullable float representing the TimeZoneOffset field</returns>      
      public float? GetTimeZoneOffset(int index)   
      {                
         return (float?)GetFieldValue(5, index, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TimeZoneOffset field
      /// Units: hr
      /// Comment: timezone offset in 1/4 hour increments</summary>      
      /// <param name="index">0 based index of time_zone_offset</param>
      /// <param name="timeZoneOffset_">Nullable field value to be set</param>      
      public void SetTimeZoneOffset(int index, float? timeZoneOffset_) 
      {  
         SetFieldValue(5, index, timeZoneOffset_, Fit.SubfieldIndexMainField);
      }
                        
      #endregion // Methods
   } // Class
} // namespace
