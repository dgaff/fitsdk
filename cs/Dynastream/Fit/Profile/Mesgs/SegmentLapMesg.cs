#region Copyright
////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2015 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 15.20Release
// Tag = development-akw-15.20.00-0
////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;


namespace Dynastream.Fit
{
   /// <summary>
   /// Implements the SegmentLap profile message.
   /// </summary>  
   public class SegmentLapMesg : Mesg 
   {    
      #region Fields            
      static class TotalCyclesSubfield
      {
         public static ushort TotalStrokes = 0;
         public static ushort Subfields = 1;
         public static ushort Active = Fit.SubfieldIndexActiveSubfield;
         public static ushort MainField = Fit.SubfieldIndexMainField;
      }     
      #endregion

      #region Constructors                 
      public SegmentLapMesg() : base(Profile.mesgs[Profile.SegmentLapIndex])               
      {                 
      }
      
      public SegmentLapMesg(Mesg mesg) : base(mesg)
      {
      }
      #endregion // Constructors

      #region Methods    
      ///<summary>      
      /// Retrieves the MessageIndex field</summary>
      /// <returns>Returns nullable ushort representing the MessageIndex field</returns>      
      public ushort? GetMessageIndex()   
      {                
         return (ushort?)GetFieldValue(254, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MessageIndex field</summary>
      /// <param name="messageIndex_">Nullable field value to be set</param>      
      public void SetMessageIndex(ushort? messageIndex_) 
      {  
         SetFieldValue(254, 0, messageIndex_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the Timestamp field
      /// Units: s
      /// Comment: Lap end time.</summary>
      /// <returns>Returns DateTime representing the Timestamp field</returns>      
      public DateTime GetTimestamp()   
      {                
         return TimestampToDateTime((uint?)GetFieldValue(253, 0, Fit.SubfieldIndexMainField));                     
      }

      /// <summary>        
      /// Set Timestamp field
      /// Units: s
      /// Comment: Lap end time.</summary>
      /// <param name="timestamp_">Nullable field value to be set</param>      
      public void SetTimestamp(DateTime timestamp_) 
      {  
         SetFieldValue(253, 0, timestamp_.GetTimeStamp(), Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the Event field</summary>
      /// <returns>Returns nullable Event enum representing the Event field</returns>      
      public Event? GetEvent()   
      { 
         object obj = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
         Event? value = obj == null ? (Event?)null : (Event)obj;
         return value;                     
      }

      /// <summary>        
      /// Set Event field</summary>
      /// <param name="event_">Nullable field value to be set</param>      
      public void SetEvent(Event? event_) 
      {  
         SetFieldValue(0, 0, event_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the EventType field</summary>
      /// <returns>Returns nullable EventType enum representing the EventType field</returns>      
      public EventType? GetEventType()   
      { 
         object obj = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
         EventType? value = obj == null ? (EventType?)null : (EventType)obj;
         return value;                     
      }

      /// <summary>        
      /// Set EventType field</summary>
      /// <param name="eventType_">Nullable field value to be set</param>      
      public void SetEventType(EventType? eventType_) 
      {  
         SetFieldValue(1, 0, eventType_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the StartTime field</summary>
      /// <returns>Returns DateTime representing the StartTime field</returns>      
      public DateTime GetStartTime()   
      {                
         return TimestampToDateTime((uint?)GetFieldValue(2, 0, Fit.SubfieldIndexMainField));                     
      }

      /// <summary>        
      /// Set StartTime field</summary>
      /// <param name="startTime_">Nullable field value to be set</param>      
      public void SetStartTime(DateTime startTime_) 
      {  
         SetFieldValue(2, 0, startTime_.GetTimeStamp(), Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the StartPositionLat field
      /// Units: semicircles</summary>
      /// <returns>Returns nullable int representing the StartPositionLat field</returns>      
      public int? GetStartPositionLat()   
      {                
         return (int?)GetFieldValue(3, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set StartPositionLat field
      /// Units: semicircles</summary>
      /// <param name="startPositionLat_">Nullable field value to be set</param>      
      public void SetStartPositionLat(int? startPositionLat_) 
      {  
         SetFieldValue(3, 0, startPositionLat_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the StartPositionLong field
      /// Units: semicircles</summary>
      /// <returns>Returns nullable int representing the StartPositionLong field</returns>      
      public int? GetStartPositionLong()   
      {                
         return (int?)GetFieldValue(4, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set StartPositionLong field
      /// Units: semicircles</summary>
      /// <param name="startPositionLong_">Nullable field value to be set</param>      
      public void SetStartPositionLong(int? startPositionLong_) 
      {  
         SetFieldValue(4, 0, startPositionLong_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the EndPositionLat field
      /// Units: semicircles</summary>
      /// <returns>Returns nullable int representing the EndPositionLat field</returns>      
      public int? GetEndPositionLat()   
      {                
         return (int?)GetFieldValue(5, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set EndPositionLat field
      /// Units: semicircles</summary>
      /// <param name="endPositionLat_">Nullable field value to be set</param>      
      public void SetEndPositionLat(int? endPositionLat_) 
      {  
         SetFieldValue(5, 0, endPositionLat_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the EndPositionLong field
      /// Units: semicircles</summary>
      /// <returns>Returns nullable int representing the EndPositionLong field</returns>      
      public int? GetEndPositionLong()   
      {                
         return (int?)GetFieldValue(6, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set EndPositionLong field
      /// Units: semicircles</summary>
      /// <param name="endPositionLong_">Nullable field value to be set</param>      
      public void SetEndPositionLong(int? endPositionLong_) 
      {  
         SetFieldValue(6, 0, endPositionLong_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the TotalElapsedTime field
      /// Units: s
      /// Comment: Time (includes pauses)</summary>
      /// <returns>Returns nullable float representing the TotalElapsedTime field</returns>      
      public float? GetTotalElapsedTime()   
      {                
         return (float?)GetFieldValue(7, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TotalElapsedTime field
      /// Units: s
      /// Comment: Time (includes pauses)</summary>
      /// <param name="totalElapsedTime_">Nullable field value to be set</param>      
      public void SetTotalElapsedTime(float? totalElapsedTime_) 
      {  
         SetFieldValue(7, 0, totalElapsedTime_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the TotalTimerTime field
      /// Units: s
      /// Comment: Timer Time (excludes pauses)</summary>
      /// <returns>Returns nullable float representing the TotalTimerTime field</returns>      
      public float? GetTotalTimerTime()   
      {                
         return (float?)GetFieldValue(8, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TotalTimerTime field
      /// Units: s
      /// Comment: Timer Time (excludes pauses)</summary>
      /// <param name="totalTimerTime_">Nullable field value to be set</param>      
      public void SetTotalTimerTime(float? totalTimerTime_) 
      {  
         SetFieldValue(8, 0, totalTimerTime_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the TotalDistance field
      /// Units: m</summary>
      /// <returns>Returns nullable float representing the TotalDistance field</returns>      
      public float? GetTotalDistance()   
      {                
         return (float?)GetFieldValue(9, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TotalDistance field
      /// Units: m</summary>
      /// <param name="totalDistance_">Nullable field value to be set</param>      
      public void SetTotalDistance(float? totalDistance_) 
      {  
         SetFieldValue(9, 0, totalDistance_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the TotalCycles field
      /// Units: cycles</summary>
      /// <returns>Returns nullable uint representing the TotalCycles field</returns>      
      public uint? GetTotalCycles()   
      {                
         return (uint?)GetFieldValue(10, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TotalCycles field
      /// Units: cycles</summary>
      /// <param name="totalCycles_">Nullable field value to be set</param>      
      public void SetTotalCycles(uint? totalCycles_) 
      {  
         SetFieldValue(10, 0, totalCycles_, Fit.SubfieldIndexMainField);
      }
      

      /// <summary>       
      /// Retrieves the TotalStrokes subfield
      /// Units: strokes</summary>      
      /// <returns>Nullable uint representing the TotalStrokes subfield</returns>      
      public uint? GetTotalStrokes() 
      {                               
         return (uint?)GetFieldValue(10, 0, TotalCyclesSubfield.TotalStrokes);   
      }

      /// <summary> 
      /// 
      /// Set TotalStrokes subfield
      /// Units: strokes</summary>
      /// <param name="totalStrokes">Subfield value to be set</param>      
      public void SetTotalStrokes(uint? totalStrokes) 
      {  
         SetFieldValue(10, 0, totalStrokes, TotalCyclesSubfield.TotalStrokes);
      }    
      ///<summary>      
      /// Retrieves the TotalCalories field
      /// Units: kcal</summary>
      /// <returns>Returns nullable ushort representing the TotalCalories field</returns>      
      public ushort? GetTotalCalories()   
      {                
         return (ushort?)GetFieldValue(11, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TotalCalories field
      /// Units: kcal</summary>
      /// <param name="totalCalories_">Nullable field value to be set</param>      
      public void SetTotalCalories(ushort? totalCalories_) 
      {  
         SetFieldValue(11, 0, totalCalories_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the TotalFatCalories field
      /// Units: kcal
      /// Comment: If New Leaf</summary>
      /// <returns>Returns nullable ushort representing the TotalFatCalories field</returns>      
      public ushort? GetTotalFatCalories()   
      {                
         return (ushort?)GetFieldValue(12, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TotalFatCalories field
      /// Units: kcal
      /// Comment: If New Leaf</summary>
      /// <param name="totalFatCalories_">Nullable field value to be set</param>      
      public void SetTotalFatCalories(ushort? totalFatCalories_) 
      {  
         SetFieldValue(12, 0, totalFatCalories_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgSpeed field
      /// Units: m/s</summary>
      /// <returns>Returns nullable float representing the AvgSpeed field</returns>      
      public float? GetAvgSpeed()   
      {                
         return (float?)GetFieldValue(13, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgSpeed field
      /// Units: m/s</summary>
      /// <param name="avgSpeed_">Nullable field value to be set</param>      
      public void SetAvgSpeed(float? avgSpeed_) 
      {  
         SetFieldValue(13, 0, avgSpeed_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the MaxSpeed field
      /// Units: m/s</summary>
      /// <returns>Returns nullable float representing the MaxSpeed field</returns>      
      public float? GetMaxSpeed()   
      {                
         return (float?)GetFieldValue(14, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MaxSpeed field
      /// Units: m/s</summary>
      /// <param name="maxSpeed_">Nullable field value to be set</param>      
      public void SetMaxSpeed(float? maxSpeed_) 
      {  
         SetFieldValue(14, 0, maxSpeed_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgHeartRate field
      /// Units: bpm</summary>
      /// <returns>Returns nullable byte representing the AvgHeartRate field</returns>      
      public byte? GetAvgHeartRate()   
      {                
         return (byte?)GetFieldValue(15, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgHeartRate field
      /// Units: bpm</summary>
      /// <param name="avgHeartRate_">Nullable field value to be set</param>      
      public void SetAvgHeartRate(byte? avgHeartRate_) 
      {  
         SetFieldValue(15, 0, avgHeartRate_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the MaxHeartRate field
      /// Units: bpm</summary>
      /// <returns>Returns nullable byte representing the MaxHeartRate field</returns>      
      public byte? GetMaxHeartRate()   
      {                
         return (byte?)GetFieldValue(16, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MaxHeartRate field
      /// Units: bpm</summary>
      /// <param name="maxHeartRate_">Nullable field value to be set</param>      
      public void SetMaxHeartRate(byte? maxHeartRate_) 
      {  
         SetFieldValue(16, 0, maxHeartRate_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgCadence field
      /// Units: rpm
      /// Comment: total_cycles / total_timer_time if non_zero_avg_cadence otherwise total_cycles / total_elapsed_time</summary>
      /// <returns>Returns nullable byte representing the AvgCadence field</returns>      
      public byte? GetAvgCadence()   
      {                
         return (byte?)GetFieldValue(17, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgCadence field
      /// Units: rpm
      /// Comment: total_cycles / total_timer_time if non_zero_avg_cadence otherwise total_cycles / total_elapsed_time</summary>
      /// <param name="avgCadence_">Nullable field value to be set</param>      
      public void SetAvgCadence(byte? avgCadence_) 
      {  
         SetFieldValue(17, 0, avgCadence_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the MaxCadence field
      /// Units: rpm</summary>
      /// <returns>Returns nullable byte representing the MaxCadence field</returns>      
      public byte? GetMaxCadence()   
      {                
         return (byte?)GetFieldValue(18, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MaxCadence field
      /// Units: rpm</summary>
      /// <param name="maxCadence_">Nullable field value to be set</param>      
      public void SetMaxCadence(byte? maxCadence_) 
      {  
         SetFieldValue(18, 0, maxCadence_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgPower field
      /// Units: watts
      /// Comment: total_power / total_timer_time if non_zero_avg_power otherwise total_power / total_elapsed_time</summary>
      /// <returns>Returns nullable ushort representing the AvgPower field</returns>      
      public ushort? GetAvgPower()   
      {                
         return (ushort?)GetFieldValue(19, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgPower field
      /// Units: watts
      /// Comment: total_power / total_timer_time if non_zero_avg_power otherwise total_power / total_elapsed_time</summary>
      /// <param name="avgPower_">Nullable field value to be set</param>      
      public void SetAvgPower(ushort? avgPower_) 
      {  
         SetFieldValue(19, 0, avgPower_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the MaxPower field
      /// Units: watts</summary>
      /// <returns>Returns nullable ushort representing the MaxPower field</returns>      
      public ushort? GetMaxPower()   
      {                
         return (ushort?)GetFieldValue(20, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MaxPower field
      /// Units: watts</summary>
      /// <param name="maxPower_">Nullable field value to be set</param>      
      public void SetMaxPower(ushort? maxPower_) 
      {  
         SetFieldValue(20, 0, maxPower_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the TotalAscent field
      /// Units: m</summary>
      /// <returns>Returns nullable ushort representing the TotalAscent field</returns>      
      public ushort? GetTotalAscent()   
      {                
         return (ushort?)GetFieldValue(21, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TotalAscent field
      /// Units: m</summary>
      /// <param name="totalAscent_">Nullable field value to be set</param>      
      public void SetTotalAscent(ushort? totalAscent_) 
      {  
         SetFieldValue(21, 0, totalAscent_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the TotalDescent field
      /// Units: m</summary>
      /// <returns>Returns nullable ushort representing the TotalDescent field</returns>      
      public ushort? GetTotalDescent()   
      {                
         return (ushort?)GetFieldValue(22, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TotalDescent field
      /// Units: m</summary>
      /// <param name="totalDescent_">Nullable field value to be set</param>      
      public void SetTotalDescent(ushort? totalDescent_) 
      {  
         SetFieldValue(22, 0, totalDescent_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the Sport field</summary>
      /// <returns>Returns nullable Sport enum representing the Sport field</returns>      
      public Sport? GetSport()   
      { 
         object obj = GetFieldValue(23, 0, Fit.SubfieldIndexMainField);
         Sport? value = obj == null ? (Sport?)null : (Sport)obj;
         return value;                     
      }

      /// <summary>        
      /// Set Sport field</summary>
      /// <param name="sport_">Nullable field value to be set</param>      
      public void SetSport(Sport? sport_) 
      {  
         SetFieldValue(23, 0, sport_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the EventGroup field</summary>
      /// <returns>Returns nullable byte representing the EventGroup field</returns>      
      public byte? GetEventGroup()   
      {                
         return (byte?)GetFieldValue(24, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set EventGroup field</summary>
      /// <param name="eventGroup_">Nullable field value to be set</param>      
      public void SetEventGroup(byte? eventGroup_) 
      {  
         SetFieldValue(24, 0, eventGroup_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the NecLat field
      /// Units: semicircles
      /// Comment: North east corner latitude.</summary>
      /// <returns>Returns nullable int representing the NecLat field</returns>      
      public int? GetNecLat()   
      {                
         return (int?)GetFieldValue(25, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set NecLat field
      /// Units: semicircles
      /// Comment: North east corner latitude.</summary>
      /// <param name="necLat_">Nullable field value to be set</param>      
      public void SetNecLat(int? necLat_) 
      {  
         SetFieldValue(25, 0, necLat_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the NecLong field
      /// Units: semicircles
      /// Comment: North east corner longitude.</summary>
      /// <returns>Returns nullable int representing the NecLong field</returns>      
      public int? GetNecLong()   
      {                
         return (int?)GetFieldValue(26, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set NecLong field
      /// Units: semicircles
      /// Comment: North east corner longitude.</summary>
      /// <param name="necLong_">Nullable field value to be set</param>      
      public void SetNecLong(int? necLong_) 
      {  
         SetFieldValue(26, 0, necLong_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the SwcLat field
      /// Units: semicircles
      /// Comment: South west corner latitude.</summary>
      /// <returns>Returns nullable int representing the SwcLat field</returns>      
      public int? GetSwcLat()   
      {                
         return (int?)GetFieldValue(27, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set SwcLat field
      /// Units: semicircles
      /// Comment: South west corner latitude.</summary>
      /// <param name="swcLat_">Nullable field value to be set</param>      
      public void SetSwcLat(int? swcLat_) 
      {  
         SetFieldValue(27, 0, swcLat_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the SwcLong field
      /// Units: semicircles
      /// Comment: South west corner latitude.</summary>
      /// <returns>Returns nullable int representing the SwcLong field</returns>      
      public int? GetSwcLong()   
      {                
         return (int?)GetFieldValue(28, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set SwcLong field
      /// Units: semicircles
      /// Comment: South west corner latitude.</summary>
      /// <param name="swcLong_">Nullable field value to be set</param>      
      public void SetSwcLong(int? swcLong_) 
      {  
         SetFieldValue(28, 0, swcLong_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the Name field</summary>
      /// <returns>Returns byte[] representing the Name field</returns>      
      public byte[] GetName()   
      {                
         return (byte[])GetFieldValue(29, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set Name field</summary>
      /// <param name="name_">field value to be set</param>      
      public void SetName(byte[] name_) 
      {  
         SetFieldValue(29, 0, name_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the NormalizedPower field
      /// Units: watts</summary>
      /// <returns>Returns nullable ushort representing the NormalizedPower field</returns>      
      public ushort? GetNormalizedPower()   
      {                
         return (ushort?)GetFieldValue(30, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set NormalizedPower field
      /// Units: watts</summary>
      /// <param name="normalizedPower_">Nullable field value to be set</param>      
      public void SetNormalizedPower(ushort? normalizedPower_) 
      {  
         SetFieldValue(30, 0, normalizedPower_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the LeftRightBalance field</summary>
      /// <returns>Returns nullable ushort representing the LeftRightBalance field</returns>      
      public ushort? GetLeftRightBalance()   
      {                
         return (ushort?)GetFieldValue(31, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set LeftRightBalance field</summary>
      /// <param name="leftRightBalance_">Nullable field value to be set</param>      
      public void SetLeftRightBalance(ushort? leftRightBalance_) 
      {  
         SetFieldValue(31, 0, leftRightBalance_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the SubSport field</summary>
      /// <returns>Returns nullable SubSport enum representing the SubSport field</returns>      
      public SubSport? GetSubSport()   
      { 
         object obj = GetFieldValue(32, 0, Fit.SubfieldIndexMainField);
         SubSport? value = obj == null ? (SubSport?)null : (SubSport)obj;
         return value;                     
      }

      /// <summary>        
      /// Set SubSport field</summary>
      /// <param name="subSport_">Nullable field value to be set</param>      
      public void SetSubSport(SubSport? subSport_) 
      {  
         SetFieldValue(32, 0, subSport_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the TotalWork field
      /// Units: J</summary>
      /// <returns>Returns nullable uint representing the TotalWork field</returns>      
      public uint? GetTotalWork()   
      {                
         return (uint?)GetFieldValue(33, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TotalWork field
      /// Units: J</summary>
      /// <param name="totalWork_">Nullable field value to be set</param>      
      public void SetTotalWork(uint? totalWork_) 
      {  
         SetFieldValue(33, 0, totalWork_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgAltitude field
      /// Units: m</summary>
      /// <returns>Returns nullable float representing the AvgAltitude field</returns>      
      public float? GetAvgAltitude()   
      {                
         return (float?)GetFieldValue(34, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgAltitude field
      /// Units: m</summary>
      /// <param name="avgAltitude_">Nullable field value to be set</param>      
      public void SetAvgAltitude(float? avgAltitude_) 
      {  
         SetFieldValue(34, 0, avgAltitude_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the MaxAltitude field
      /// Units: m</summary>
      /// <returns>Returns nullable float representing the MaxAltitude field</returns>      
      public float? GetMaxAltitude()   
      {                
         return (float?)GetFieldValue(35, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MaxAltitude field
      /// Units: m</summary>
      /// <param name="maxAltitude_">Nullable field value to be set</param>      
      public void SetMaxAltitude(float? maxAltitude_) 
      {  
         SetFieldValue(35, 0, maxAltitude_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the GpsAccuracy field
      /// Units: m</summary>
      /// <returns>Returns nullable byte representing the GpsAccuracy field</returns>      
      public byte? GetGpsAccuracy()   
      {                
         return (byte?)GetFieldValue(36, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set GpsAccuracy field
      /// Units: m</summary>
      /// <param name="gpsAccuracy_">Nullable field value to be set</param>      
      public void SetGpsAccuracy(byte? gpsAccuracy_) 
      {  
         SetFieldValue(36, 0, gpsAccuracy_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgGrade field
      /// Units: %</summary>
      /// <returns>Returns nullable float representing the AvgGrade field</returns>      
      public float? GetAvgGrade()   
      {                
         return (float?)GetFieldValue(37, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgGrade field
      /// Units: %</summary>
      /// <param name="avgGrade_">Nullable field value to be set</param>      
      public void SetAvgGrade(float? avgGrade_) 
      {  
         SetFieldValue(37, 0, avgGrade_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgPosGrade field
      /// Units: %</summary>
      /// <returns>Returns nullable float representing the AvgPosGrade field</returns>      
      public float? GetAvgPosGrade()   
      {                
         return (float?)GetFieldValue(38, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgPosGrade field
      /// Units: %</summary>
      /// <param name="avgPosGrade_">Nullable field value to be set</param>      
      public void SetAvgPosGrade(float? avgPosGrade_) 
      {  
         SetFieldValue(38, 0, avgPosGrade_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgNegGrade field
      /// Units: %</summary>
      /// <returns>Returns nullable float representing the AvgNegGrade field</returns>      
      public float? GetAvgNegGrade()   
      {                
         return (float?)GetFieldValue(39, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgNegGrade field
      /// Units: %</summary>
      /// <param name="avgNegGrade_">Nullable field value to be set</param>      
      public void SetAvgNegGrade(float? avgNegGrade_) 
      {  
         SetFieldValue(39, 0, avgNegGrade_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the MaxPosGrade field
      /// Units: %</summary>
      /// <returns>Returns nullable float representing the MaxPosGrade field</returns>      
      public float? GetMaxPosGrade()   
      {                
         return (float?)GetFieldValue(40, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MaxPosGrade field
      /// Units: %</summary>
      /// <param name="maxPosGrade_">Nullable field value to be set</param>      
      public void SetMaxPosGrade(float? maxPosGrade_) 
      {  
         SetFieldValue(40, 0, maxPosGrade_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the MaxNegGrade field
      /// Units: %</summary>
      /// <returns>Returns nullable float representing the MaxNegGrade field</returns>      
      public float? GetMaxNegGrade()   
      {                
         return (float?)GetFieldValue(41, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MaxNegGrade field
      /// Units: %</summary>
      /// <param name="maxNegGrade_">Nullable field value to be set</param>      
      public void SetMaxNegGrade(float? maxNegGrade_) 
      {  
         SetFieldValue(41, 0, maxNegGrade_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgTemperature field
      /// Units: C</summary>
      /// <returns>Returns nullable sbyte representing the AvgTemperature field</returns>      
      public sbyte? GetAvgTemperature()   
      {                
         return (sbyte?)GetFieldValue(42, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgTemperature field
      /// Units: C</summary>
      /// <param name="avgTemperature_">Nullable field value to be set</param>      
      public void SetAvgTemperature(sbyte? avgTemperature_) 
      {  
         SetFieldValue(42, 0, avgTemperature_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the MaxTemperature field
      /// Units: C</summary>
      /// <returns>Returns nullable sbyte representing the MaxTemperature field</returns>      
      public sbyte? GetMaxTemperature()   
      {                
         return (sbyte?)GetFieldValue(43, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MaxTemperature field
      /// Units: C</summary>
      /// <param name="maxTemperature_">Nullable field value to be set</param>      
      public void SetMaxTemperature(sbyte? maxTemperature_) 
      {  
         SetFieldValue(43, 0, maxTemperature_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the TotalMovingTime field
      /// Units: s</summary>
      /// <returns>Returns nullable float representing the TotalMovingTime field</returns>      
      public float? GetTotalMovingTime()   
      {                
         return (float?)GetFieldValue(44, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TotalMovingTime field
      /// Units: s</summary>
      /// <param name="totalMovingTime_">Nullable field value to be set</param>      
      public void SetTotalMovingTime(float? totalMovingTime_) 
      {  
         SetFieldValue(44, 0, totalMovingTime_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgPosVerticalSpeed field
      /// Units: m/s</summary>
      /// <returns>Returns nullable float representing the AvgPosVerticalSpeed field</returns>      
      public float? GetAvgPosVerticalSpeed()   
      {                
         return (float?)GetFieldValue(45, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgPosVerticalSpeed field
      /// Units: m/s</summary>
      /// <param name="avgPosVerticalSpeed_">Nullable field value to be set</param>      
      public void SetAvgPosVerticalSpeed(float? avgPosVerticalSpeed_) 
      {  
         SetFieldValue(45, 0, avgPosVerticalSpeed_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgNegVerticalSpeed field
      /// Units: m/s</summary>
      /// <returns>Returns nullable float representing the AvgNegVerticalSpeed field</returns>      
      public float? GetAvgNegVerticalSpeed()   
      {                
         return (float?)GetFieldValue(46, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgNegVerticalSpeed field
      /// Units: m/s</summary>
      /// <param name="avgNegVerticalSpeed_">Nullable field value to be set</param>      
      public void SetAvgNegVerticalSpeed(float? avgNegVerticalSpeed_) 
      {  
         SetFieldValue(46, 0, avgNegVerticalSpeed_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the MaxPosVerticalSpeed field
      /// Units: m/s</summary>
      /// <returns>Returns nullable float representing the MaxPosVerticalSpeed field</returns>      
      public float? GetMaxPosVerticalSpeed()   
      {                
         return (float?)GetFieldValue(47, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MaxPosVerticalSpeed field
      /// Units: m/s</summary>
      /// <param name="maxPosVerticalSpeed_">Nullable field value to be set</param>      
      public void SetMaxPosVerticalSpeed(float? maxPosVerticalSpeed_) 
      {  
         SetFieldValue(47, 0, maxPosVerticalSpeed_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the MaxNegVerticalSpeed field
      /// Units: m/s</summary>
      /// <returns>Returns nullable float representing the MaxNegVerticalSpeed field</returns>      
      public float? GetMaxNegVerticalSpeed()   
      {                
         return (float?)GetFieldValue(48, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MaxNegVerticalSpeed field
      /// Units: m/s</summary>
      /// <param name="maxNegVerticalSpeed_">Nullable field value to be set</param>      
      public void SetMaxNegVerticalSpeed(float? maxNegVerticalSpeed_) 
      {  
         SetFieldValue(48, 0, maxNegVerticalSpeed_, Fit.SubfieldIndexMainField);
      }
          
      
      /// <summary>
      /// 
      /// </summary>  
      /// <returns>returns number of elements in field TimeInHrZone</returns>      
      public int GetNumTimeInHrZone() 
      {
         return GetNumFieldValues(49, Fit.SubfieldIndexMainField);
      }

      ///<summary>      
      /// Retrieves the TimeInHrZone field
      /// Units: s</summary>
      /// <param name="index">0 based index of TimeInHrZone element to retrieve</param>
      /// <returns>Returns nullable float representing the TimeInHrZone field</returns>      
      public float? GetTimeInHrZone(int index)   
      {                
         return (float?)GetFieldValue(49, index, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TimeInHrZone field
      /// Units: s</summary>      
      /// <param name="index">0 based index of time_in_hr_zone</param>
      /// <param name="timeInHrZone_">Nullable field value to be set</param>      
      public void SetTimeInHrZone(int index, float? timeInHrZone_) 
      {  
         SetFieldValue(49, index, timeInHrZone_, Fit.SubfieldIndexMainField);
      }
          
      
      /// <summary>
      /// 
      /// </summary>  
      /// <returns>returns number of elements in field TimeInSpeedZone</returns>      
      public int GetNumTimeInSpeedZone() 
      {
         return GetNumFieldValues(50, Fit.SubfieldIndexMainField);
      }

      ///<summary>      
      /// Retrieves the TimeInSpeedZone field
      /// Units: s</summary>
      /// <param name="index">0 based index of TimeInSpeedZone element to retrieve</param>
      /// <returns>Returns nullable float representing the TimeInSpeedZone field</returns>      
      public float? GetTimeInSpeedZone(int index)   
      {                
         return (float?)GetFieldValue(50, index, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TimeInSpeedZone field
      /// Units: s</summary>      
      /// <param name="index">0 based index of time_in_speed_zone</param>
      /// <param name="timeInSpeedZone_">Nullable field value to be set</param>      
      public void SetTimeInSpeedZone(int index, float? timeInSpeedZone_) 
      {  
         SetFieldValue(50, index, timeInSpeedZone_, Fit.SubfieldIndexMainField);
      }
          
      
      /// <summary>
      /// 
      /// </summary>  
      /// <returns>returns number of elements in field TimeInCadenceZone</returns>      
      public int GetNumTimeInCadenceZone() 
      {
         return GetNumFieldValues(51, Fit.SubfieldIndexMainField);
      }

      ///<summary>      
      /// Retrieves the TimeInCadenceZone field
      /// Units: s</summary>
      /// <param name="index">0 based index of TimeInCadenceZone element to retrieve</param>
      /// <returns>Returns nullable float representing the TimeInCadenceZone field</returns>      
      public float? GetTimeInCadenceZone(int index)   
      {                
         return (float?)GetFieldValue(51, index, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TimeInCadenceZone field
      /// Units: s</summary>      
      /// <param name="index">0 based index of time_in_cadence_zone</param>
      /// <param name="timeInCadenceZone_">Nullable field value to be set</param>      
      public void SetTimeInCadenceZone(int index, float? timeInCadenceZone_) 
      {  
         SetFieldValue(51, index, timeInCadenceZone_, Fit.SubfieldIndexMainField);
      }
          
      
      /// <summary>
      /// 
      /// </summary>  
      /// <returns>returns number of elements in field TimeInPowerZone</returns>      
      public int GetNumTimeInPowerZone() 
      {
         return GetNumFieldValues(52, Fit.SubfieldIndexMainField);
      }

      ///<summary>      
      /// Retrieves the TimeInPowerZone field
      /// Units: s</summary>
      /// <param name="index">0 based index of TimeInPowerZone element to retrieve</param>
      /// <returns>Returns nullable float representing the TimeInPowerZone field</returns>      
      public float? GetTimeInPowerZone(int index)   
      {                
         return (float?)GetFieldValue(52, index, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TimeInPowerZone field
      /// Units: s</summary>      
      /// <param name="index">0 based index of time_in_power_zone</param>
      /// <param name="timeInPowerZone_">Nullable field value to be set</param>      
      public void SetTimeInPowerZone(int index, float? timeInPowerZone_) 
      {  
         SetFieldValue(52, index, timeInPowerZone_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the RepetitionNum field</summary>
      /// <returns>Returns nullable ushort representing the RepetitionNum field</returns>      
      public ushort? GetRepetitionNum()   
      {                
         return (ushort?)GetFieldValue(53, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set RepetitionNum field</summary>
      /// <param name="repetitionNum_">Nullable field value to be set</param>      
      public void SetRepetitionNum(ushort? repetitionNum_) 
      {  
         SetFieldValue(53, 0, repetitionNum_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the MinAltitude field
      /// Units: m</summary>
      /// <returns>Returns nullable float representing the MinAltitude field</returns>      
      public float? GetMinAltitude()   
      {                
         return (float?)GetFieldValue(54, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MinAltitude field
      /// Units: m</summary>
      /// <param name="minAltitude_">Nullable field value to be set</param>      
      public void SetMinAltitude(float? minAltitude_) 
      {  
         SetFieldValue(54, 0, minAltitude_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the MinHeartRate field
      /// Units: bpm</summary>
      /// <returns>Returns nullable byte representing the MinHeartRate field</returns>      
      public byte? GetMinHeartRate()   
      {                
         return (byte?)GetFieldValue(55, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MinHeartRate field
      /// Units: bpm</summary>
      /// <param name="minHeartRate_">Nullable field value to be set</param>      
      public void SetMinHeartRate(byte? minHeartRate_) 
      {  
         SetFieldValue(55, 0, minHeartRate_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the ActiveTime field
      /// Units: s</summary>
      /// <returns>Returns nullable float representing the ActiveTime field</returns>      
      public float? GetActiveTime()   
      {                
         return (float?)GetFieldValue(56, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set ActiveTime field
      /// Units: s</summary>
      /// <param name="activeTime_">Nullable field value to be set</param>      
      public void SetActiveTime(float? activeTime_) 
      {  
         SetFieldValue(56, 0, activeTime_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the WktStepIndex field</summary>
      /// <returns>Returns nullable ushort representing the WktStepIndex field</returns>      
      public ushort? GetWktStepIndex()   
      {                
         return (ushort?)GetFieldValue(57, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set WktStepIndex field</summary>
      /// <param name="wktStepIndex_">Nullable field value to be set</param>      
      public void SetWktStepIndex(ushort? wktStepIndex_) 
      {  
         SetFieldValue(57, 0, wktStepIndex_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the SportEvent field</summary>
      /// <returns>Returns nullable SportEvent enum representing the SportEvent field</returns>      
      public SportEvent? GetSportEvent()   
      { 
         object obj = GetFieldValue(58, 0, Fit.SubfieldIndexMainField);
         SportEvent? value = obj == null ? (SportEvent?)null : (SportEvent)obj;
         return value;                     
      }

      /// <summary>        
      /// Set SportEvent field</summary>
      /// <param name="sportEvent_">Nullable field value to be set</param>      
      public void SetSportEvent(SportEvent? sportEvent_) 
      {  
         SetFieldValue(58, 0, sportEvent_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgLeftTorqueEffectiveness field
      /// Units: percent</summary>
      /// <returns>Returns nullable float representing the AvgLeftTorqueEffectiveness field</returns>      
      public float? GetAvgLeftTorqueEffectiveness()   
      {                
         return (float?)GetFieldValue(59, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgLeftTorqueEffectiveness field
      /// Units: percent</summary>
      /// <param name="avgLeftTorqueEffectiveness_">Nullable field value to be set</param>      
      public void SetAvgLeftTorqueEffectiveness(float? avgLeftTorqueEffectiveness_) 
      {  
         SetFieldValue(59, 0, avgLeftTorqueEffectiveness_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgRightTorqueEffectiveness field
      /// Units: percent</summary>
      /// <returns>Returns nullable float representing the AvgRightTorqueEffectiveness field</returns>      
      public float? GetAvgRightTorqueEffectiveness()   
      {                
         return (float?)GetFieldValue(60, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgRightTorqueEffectiveness field
      /// Units: percent</summary>
      /// <param name="avgRightTorqueEffectiveness_">Nullable field value to be set</param>      
      public void SetAvgRightTorqueEffectiveness(float? avgRightTorqueEffectiveness_) 
      {  
         SetFieldValue(60, 0, avgRightTorqueEffectiveness_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgLeftPedalSmoothness field
      /// Units: percent</summary>
      /// <returns>Returns nullable float representing the AvgLeftPedalSmoothness field</returns>      
      public float? GetAvgLeftPedalSmoothness()   
      {                
         return (float?)GetFieldValue(61, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgLeftPedalSmoothness field
      /// Units: percent</summary>
      /// <param name="avgLeftPedalSmoothness_">Nullable field value to be set</param>      
      public void SetAvgLeftPedalSmoothness(float? avgLeftPedalSmoothness_) 
      {  
         SetFieldValue(61, 0, avgLeftPedalSmoothness_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgRightPedalSmoothness field
      /// Units: percent</summary>
      /// <returns>Returns nullable float representing the AvgRightPedalSmoothness field</returns>      
      public float? GetAvgRightPedalSmoothness()   
      {                
         return (float?)GetFieldValue(62, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgRightPedalSmoothness field
      /// Units: percent</summary>
      /// <param name="avgRightPedalSmoothness_">Nullable field value to be set</param>      
      public void SetAvgRightPedalSmoothness(float? avgRightPedalSmoothness_) 
      {  
         SetFieldValue(62, 0, avgRightPedalSmoothness_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgCombinedPedalSmoothness field
      /// Units: percent</summary>
      /// <returns>Returns nullable float representing the AvgCombinedPedalSmoothness field</returns>      
      public float? GetAvgCombinedPedalSmoothness()   
      {                
         return (float?)GetFieldValue(63, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgCombinedPedalSmoothness field
      /// Units: percent</summary>
      /// <param name="avgCombinedPedalSmoothness_">Nullable field value to be set</param>      
      public void SetAvgCombinedPedalSmoothness(float? avgCombinedPedalSmoothness_) 
      {  
         SetFieldValue(63, 0, avgCombinedPedalSmoothness_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the Status field</summary>
      /// <returns>Returns nullable SegmentLapStatus enum representing the Status field</returns>      
      public SegmentLapStatus? GetStatus()   
      { 
         object obj = GetFieldValue(64, 0, Fit.SubfieldIndexMainField);
         SegmentLapStatus? value = obj == null ? (SegmentLapStatus?)null : (SegmentLapStatus)obj;
         return value;                     
      }

      /// <summary>        
      /// Set Status field</summary>
      /// <param name="status_">Nullable field value to be set</param>      
      public void SetStatus(SegmentLapStatus? status_) 
      {  
         SetFieldValue(64, 0, status_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the Uuid field</summary>
      /// <returns>Returns byte[] representing the Uuid field</returns>      
      public byte[] GetUuid()   
      {                
         return (byte[])GetFieldValue(65, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set Uuid field</summary>
      /// <param name="uuid_">field value to be set</param>      
      public void SetUuid(byte[] uuid_) 
      {  
         SetFieldValue(65, 0, uuid_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgFractionalCadence field
      /// Units: rpm
      /// Comment: fractional part of the avg_cadence</summary>
      /// <returns>Returns nullable float representing the AvgFractionalCadence field</returns>      
      public float? GetAvgFractionalCadence()   
      {                
         return (float?)GetFieldValue(66, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgFractionalCadence field
      /// Units: rpm
      /// Comment: fractional part of the avg_cadence</summary>
      /// <param name="avgFractionalCadence_">Nullable field value to be set</param>      
      public void SetAvgFractionalCadence(float? avgFractionalCadence_) 
      {  
         SetFieldValue(66, 0, avgFractionalCadence_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the MaxFractionalCadence field
      /// Units: rpm
      /// Comment: fractional part of the max_cadence</summary>
      /// <returns>Returns nullable float representing the MaxFractionalCadence field</returns>      
      public float? GetMaxFractionalCadence()   
      {                
         return (float?)GetFieldValue(67, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MaxFractionalCadence field
      /// Units: rpm
      /// Comment: fractional part of the max_cadence</summary>
      /// <param name="maxFractionalCadence_">Nullable field value to be set</param>      
      public void SetMaxFractionalCadence(float? maxFractionalCadence_) 
      {  
         SetFieldValue(67, 0, maxFractionalCadence_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the TotalFractionalCycles field
      /// Units: cycles
      /// Comment: fractional part of the total_cycles</summary>
      /// <returns>Returns nullable float representing the TotalFractionalCycles field</returns>      
      public float? GetTotalFractionalCycles()   
      {                
         return (float?)GetFieldValue(68, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TotalFractionalCycles field
      /// Units: cycles
      /// Comment: fractional part of the total_cycles</summary>
      /// <param name="totalFractionalCycles_">Nullable field value to be set</param>      
      public void SetTotalFractionalCycles(float? totalFractionalCycles_) 
      {  
         SetFieldValue(68, 0, totalFractionalCycles_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the FrontGearShiftCount field</summary>
      /// <returns>Returns nullable ushort representing the FrontGearShiftCount field</returns>      
      public ushort? GetFrontGearShiftCount()   
      {                
         return (ushort?)GetFieldValue(69, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set FrontGearShiftCount field</summary>
      /// <param name="frontGearShiftCount_">Nullable field value to be set</param>      
      public void SetFrontGearShiftCount(ushort? frontGearShiftCount_) 
      {  
         SetFieldValue(69, 0, frontGearShiftCount_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the RearGearShiftCount field</summary>
      /// <returns>Returns nullable ushort representing the RearGearShiftCount field</returns>      
      public ushort? GetRearGearShiftCount()   
      {                
         return (ushort?)GetFieldValue(70, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set RearGearShiftCount field</summary>
      /// <param name="rearGearShiftCount_">Nullable field value to be set</param>      
      public void SetRearGearShiftCount(ushort? rearGearShiftCount_) 
      {  
         SetFieldValue(70, 0, rearGearShiftCount_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the TimeStanding field
      /// Units: s
      /// Comment: Total time spent in the standing position</summary>
      /// <returns>Returns nullable float representing the TimeStanding field</returns>      
      public float? GetTimeStanding()   
      {                
         return (float?)GetFieldValue(71, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set TimeStanding field
      /// Units: s
      /// Comment: Total time spent in the standing position</summary>
      /// <param name="timeStanding_">Nullable field value to be set</param>      
      public void SetTimeStanding(float? timeStanding_) 
      {  
         SetFieldValue(71, 0, timeStanding_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the StandCount field
      /// Comment: Number of transitions to the standing state</summary>
      /// <returns>Returns nullable ushort representing the StandCount field</returns>      
      public ushort? GetStandCount()   
      {                
         return (ushort?)GetFieldValue(72, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set StandCount field
      /// Comment: Number of transitions to the standing state</summary>
      /// <param name="standCount_">Nullable field value to be set</param>      
      public void SetStandCount(ushort? standCount_) 
      {  
         SetFieldValue(72, 0, standCount_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgLeftPco field
      /// Units: mm
      /// Comment: Average left platform center offset</summary>
      /// <returns>Returns nullable sbyte representing the AvgLeftPco field</returns>      
      public sbyte? GetAvgLeftPco()   
      {                
         return (sbyte?)GetFieldValue(73, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgLeftPco field
      /// Units: mm
      /// Comment: Average left platform center offset</summary>
      /// <param name="avgLeftPco_">Nullable field value to be set</param>      
      public void SetAvgLeftPco(sbyte? avgLeftPco_) 
      {  
         SetFieldValue(73, 0, avgLeftPco_, Fit.SubfieldIndexMainField);
      }
          
      ///<summary>      
      /// Retrieves the AvgRightPco field
      /// Units: mm
      /// Comment: Average right platform center offset</summary>
      /// <returns>Returns nullable sbyte representing the AvgRightPco field</returns>      
      public sbyte? GetAvgRightPco()   
      {                
         return (sbyte?)GetFieldValue(74, 0, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgRightPco field
      /// Units: mm
      /// Comment: Average right platform center offset</summary>
      /// <param name="avgRightPco_">Nullable field value to be set</param>      
      public void SetAvgRightPco(sbyte? avgRightPco_) 
      {  
         SetFieldValue(74, 0, avgRightPco_, Fit.SubfieldIndexMainField);
      }
          
      
      /// <summary>
      /// 
      /// </summary>  
      /// <returns>returns number of elements in field AvgLeftPowerPhase</returns>      
      public int GetNumAvgLeftPowerPhase() 
      {
         return GetNumFieldValues(75, Fit.SubfieldIndexMainField);
      }

      ///<summary>      
      /// Retrieves the AvgLeftPowerPhase field
      /// Units: degrees
      /// Comment: Average left power phase angles. Data value indexes defined by power_phase_type.</summary>
      /// <param name="index">0 based index of AvgLeftPowerPhase element to retrieve</param>
      /// <returns>Returns nullable float representing the AvgLeftPowerPhase field</returns>      
      public float? GetAvgLeftPowerPhase(int index)   
      {                
         return (float?)GetFieldValue(75, index, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgLeftPowerPhase field
      /// Units: degrees
      /// Comment: Average left power phase angles. Data value indexes defined by power_phase_type.</summary>      
      /// <param name="index">0 based index of avg_left_power_phase</param>
      /// <param name="avgLeftPowerPhase_">Nullable field value to be set</param>      
      public void SetAvgLeftPowerPhase(int index, float? avgLeftPowerPhase_) 
      {  
         SetFieldValue(75, index, avgLeftPowerPhase_, Fit.SubfieldIndexMainField);
      }
          
      
      /// <summary>
      /// 
      /// </summary>  
      /// <returns>returns number of elements in field AvgLeftPowerPhasePeak</returns>      
      public int GetNumAvgLeftPowerPhasePeak() 
      {
         return GetNumFieldValues(76, Fit.SubfieldIndexMainField);
      }

      ///<summary>      
      /// Retrieves the AvgLeftPowerPhasePeak field
      /// Units: degrees
      /// Comment: Average left power phase peak angles. Data value indexes defined by power_phase_type.</summary>
      /// <param name="index">0 based index of AvgLeftPowerPhasePeak element to retrieve</param>
      /// <returns>Returns nullable float representing the AvgLeftPowerPhasePeak field</returns>      
      public float? GetAvgLeftPowerPhasePeak(int index)   
      {                
         return (float?)GetFieldValue(76, index, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgLeftPowerPhasePeak field
      /// Units: degrees
      /// Comment: Average left power phase peak angles. Data value indexes defined by power_phase_type.</summary>      
      /// <param name="index">0 based index of avg_left_power_phase_peak</param>
      /// <param name="avgLeftPowerPhasePeak_">Nullable field value to be set</param>      
      public void SetAvgLeftPowerPhasePeak(int index, float? avgLeftPowerPhasePeak_) 
      {  
         SetFieldValue(76, index, avgLeftPowerPhasePeak_, Fit.SubfieldIndexMainField);
      }
          
      
      /// <summary>
      /// 
      /// </summary>  
      /// <returns>returns number of elements in field AvgRightPowerPhase</returns>      
      public int GetNumAvgRightPowerPhase() 
      {
         return GetNumFieldValues(77, Fit.SubfieldIndexMainField);
      }

      ///<summary>      
      /// Retrieves the AvgRightPowerPhase field
      /// Units: degrees
      /// Comment: Average right power phase angles. Data value indexes defined by power_phase_type.</summary>
      /// <param name="index">0 based index of AvgRightPowerPhase element to retrieve</param>
      /// <returns>Returns nullable float representing the AvgRightPowerPhase field</returns>      
      public float? GetAvgRightPowerPhase(int index)   
      {                
         return (float?)GetFieldValue(77, index, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgRightPowerPhase field
      /// Units: degrees
      /// Comment: Average right power phase angles. Data value indexes defined by power_phase_type.</summary>      
      /// <param name="index">0 based index of avg_right_power_phase</param>
      /// <param name="avgRightPowerPhase_">Nullable field value to be set</param>      
      public void SetAvgRightPowerPhase(int index, float? avgRightPowerPhase_) 
      {  
         SetFieldValue(77, index, avgRightPowerPhase_, Fit.SubfieldIndexMainField);
      }
          
      
      /// <summary>
      /// 
      /// </summary>  
      /// <returns>returns number of elements in field AvgRightPowerPhasePeak</returns>      
      public int GetNumAvgRightPowerPhasePeak() 
      {
         return GetNumFieldValues(78, Fit.SubfieldIndexMainField);
      }

      ///<summary>      
      /// Retrieves the AvgRightPowerPhasePeak field
      /// Units: degrees
      /// Comment: Average right power phase peak angles. Data value indexes defined by power_phase_type.</summary>
      /// <param name="index">0 based index of AvgRightPowerPhasePeak element to retrieve</param>
      /// <returns>Returns nullable float representing the AvgRightPowerPhasePeak field</returns>      
      public float? GetAvgRightPowerPhasePeak(int index)   
      {                
         return (float?)GetFieldValue(78, index, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgRightPowerPhasePeak field
      /// Units: degrees
      /// Comment: Average right power phase peak angles. Data value indexes defined by power_phase_type.</summary>      
      /// <param name="index">0 based index of avg_right_power_phase_peak</param>
      /// <param name="avgRightPowerPhasePeak_">Nullable field value to be set</param>      
      public void SetAvgRightPowerPhasePeak(int index, float? avgRightPowerPhasePeak_) 
      {  
         SetFieldValue(78, index, avgRightPowerPhasePeak_, Fit.SubfieldIndexMainField);
      }
          
      
      /// <summary>
      /// 
      /// </summary>  
      /// <returns>returns number of elements in field AvgPowerPosition</returns>      
      public int GetNumAvgPowerPosition() 
      {
         return GetNumFieldValues(79, Fit.SubfieldIndexMainField);
      }

      ///<summary>      
      /// Retrieves the AvgPowerPosition field
      /// Units: watts
      /// Comment: Average power by position. Data value indexes defined by rider_position_type.</summary>
      /// <param name="index">0 based index of AvgPowerPosition element to retrieve</param>
      /// <returns>Returns nullable ushort representing the AvgPowerPosition field</returns>      
      public ushort? GetAvgPowerPosition(int index)   
      {                
         return (ushort?)GetFieldValue(79, index, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgPowerPosition field
      /// Units: watts
      /// Comment: Average power by position. Data value indexes defined by rider_position_type.</summary>      
      /// <param name="index">0 based index of avg_power_position</param>
      /// <param name="avgPowerPosition_">Nullable field value to be set</param>      
      public void SetAvgPowerPosition(int index, ushort? avgPowerPosition_) 
      {  
         SetFieldValue(79, index, avgPowerPosition_, Fit.SubfieldIndexMainField);
      }
          
      
      /// <summary>
      /// 
      /// </summary>  
      /// <returns>returns number of elements in field MaxPowerPosition</returns>      
      public int GetNumMaxPowerPosition() 
      {
         return GetNumFieldValues(80, Fit.SubfieldIndexMainField);
      }

      ///<summary>      
      /// Retrieves the MaxPowerPosition field
      /// Units: watts
      /// Comment: Maximum power by position. Data value indexes defined by rider_position_type.</summary>
      /// <param name="index">0 based index of MaxPowerPosition element to retrieve</param>
      /// <returns>Returns nullable ushort representing the MaxPowerPosition field</returns>      
      public ushort? GetMaxPowerPosition(int index)   
      {                
         return (ushort?)GetFieldValue(80, index, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MaxPowerPosition field
      /// Units: watts
      /// Comment: Maximum power by position. Data value indexes defined by rider_position_type.</summary>      
      /// <param name="index">0 based index of max_power_position</param>
      /// <param name="maxPowerPosition_">Nullable field value to be set</param>      
      public void SetMaxPowerPosition(int index, ushort? maxPowerPosition_) 
      {  
         SetFieldValue(80, index, maxPowerPosition_, Fit.SubfieldIndexMainField);
      }
          
      
      /// <summary>
      /// 
      /// </summary>  
      /// <returns>returns number of elements in field AvgCadencePosition</returns>      
      public int GetNumAvgCadencePosition() 
      {
         return GetNumFieldValues(81, Fit.SubfieldIndexMainField);
      }

      ///<summary>      
      /// Retrieves the AvgCadencePosition field
      /// Units: rpm
      /// Comment: Average cadence by position. Data value indexes defined by rider_position_type.</summary>
      /// <param name="index">0 based index of AvgCadencePosition element to retrieve</param>
      /// <returns>Returns nullable byte representing the AvgCadencePosition field</returns>      
      public byte? GetAvgCadencePosition(int index)   
      {                
         return (byte?)GetFieldValue(81, index, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set AvgCadencePosition field
      /// Units: rpm
      /// Comment: Average cadence by position. Data value indexes defined by rider_position_type.</summary>      
      /// <param name="index">0 based index of avg_cadence_position</param>
      /// <param name="avgCadencePosition_">Nullable field value to be set</param>      
      public void SetAvgCadencePosition(int index, byte? avgCadencePosition_) 
      {  
         SetFieldValue(81, index, avgCadencePosition_, Fit.SubfieldIndexMainField);
      }
          
      
      /// <summary>
      /// 
      /// </summary>  
      /// <returns>returns number of elements in field MaxCadencePosition</returns>      
      public int GetNumMaxCadencePosition() 
      {
         return GetNumFieldValues(82, Fit.SubfieldIndexMainField);
      }

      ///<summary>      
      /// Retrieves the MaxCadencePosition field
      /// Units: rpm
      /// Comment: Maximum cadence by position. Data value indexes defined by rider_position_type.</summary>
      /// <param name="index">0 based index of MaxCadencePosition element to retrieve</param>
      /// <returns>Returns nullable byte representing the MaxCadencePosition field</returns>      
      public byte? GetMaxCadencePosition(int index)   
      {                
         return (byte?)GetFieldValue(82, index, Fit.SubfieldIndexMainField);                     
      }

      /// <summary>        
      /// Set MaxCadencePosition field
      /// Units: rpm
      /// Comment: Maximum cadence by position. Data value indexes defined by rider_position_type.</summary>      
      /// <param name="index">0 based index of max_cadence_position</param>
      /// <param name="maxCadencePosition_">Nullable field value to be set</param>      
      public void SetMaxCadencePosition(int index, byte? maxCadencePosition_) 
      {  
         SetFieldValue(82, index, maxCadencePosition_, Fit.SubfieldIndexMainField);
      }
                        
      #endregion // Methods
   } // Class
} // namespace
