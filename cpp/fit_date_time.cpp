////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2015 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 15.20Release
// Tag = development-akw-15.20.00-0
////////////////////////////////////////////////////////////////////////////////

#include "fit_date_time.hpp"

namespace fit
{

DateTime::DateTime(time_t timeStamp)
{
   this->timeStamp = (FIT_DATE_TIME) (timeStamp - systemTimeOffset);
   this->fractionalTimeStamp = 0.0;
}

DateTime::DateTime(FIT_DATE_TIME timeStamp)
{
   this->timeStamp = timeStamp;
   this->fractionalTimeStamp = 0.0;
}

DateTime::DateTime(FIT_DATE_TIME timeStamp, FIT_FLOAT64 fractionalTimeStamp)
{
   this->timeStamp = timeStamp + (FIT_DATE_TIME) floor(fractionalTimeStamp);
   this->fractionalTimeStamp = fractionalTimeStamp - (FIT_FLOAT64) floor(fractionalTimeStamp);
}

DateTime::DateTime(const DateTime& dateTime)
{
   timeStamp = dateTime.timeStamp;
   fractionalTimeStamp = dateTime.fractionalTimeStamp;
}

bool DateTime::Equals(DateTime dateTime)
{
   return( ( ( this->timeStamp == dateTime.GetTimeStamp() ) &&  ( this->fractionalTimeStamp == dateTime.GetFractionalTimestamp() ) ) );
}

FIT_DATE_TIME DateTime::GetTimeStamp()
{
   return timeStamp;
}

FIT_FLOAT64 DateTime::GetFractionalTimestamp()
{
   return fractionalTimeStamp;
}

time_t DateTime::GetTimeT()
{
   double val;
   if (fractionalTimeStamp >= 0.5)
      val = ceil(fractionalTimeStamp);
   else
      val = 0;
   return (time_t)(timeStamp + systemTimeOffset + val);
}

void DateTime::ConvertSystemTimeToUTC(long offset)
{
   if (timeStamp < FIT_DATE_TIME_MIN)
   {
      timeStamp += offset;
   }
}

} // namespace fit
