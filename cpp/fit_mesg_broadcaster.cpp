////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2015 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 16.00Release
// Tag = development-akw-16.00.00-0
////////////////////////////////////////////////////////////////////////////////


#include <istream>
#include "fit_mesg_broadcaster.hpp"
#include <algorithm>

namespace fit
{

MesgBroadcaster::MesgBroadcaster(void)
{
}

FIT_BOOL MesgBroadcaster::Run(std::istream& file)
{
   Decode decode;
   return decode.Read(file, *this, *this);
}

void MesgBroadcaster::AddListener(MesgDefinitionListener& mesgDefinitionListener)
{
   mesgDefinitionListeners.push_back(&mesgDefinitionListener);
}

void MesgBroadcaster::RemoveListener(MesgDefinitionListener& mesgDefinitionListener)
{
   mesgDefinitionListeners.erase(std::find(mesgDefinitionListeners.begin(), mesgDefinitionListeners.end(), &mesgDefinitionListener));
}

void MesgBroadcaster::AddListener(MesgListener& mesgListener)
{
   mesgListeners.push_back(&mesgListener);
}

void MesgBroadcaster::RemoveListener(MesgListener& mesgListener)
{
   mesgListeners.erase(std::find(mesgListeners.begin(), mesgListeners.end(), &mesgListener));
}

void MesgBroadcaster::AddListener(MesgWithEventListener& mesgListener)
{
   mesgWithEventBroadcaster.AddListener(mesgListener);
}

void MesgBroadcaster::RemoveListener(MesgWithEventListener& mesgListener)
{
   mesgWithEventBroadcaster.RemoveListener(mesgListener);
}

void MesgBroadcaster::AddListener(BufferedRecordMesgListener& bufferedRecordMesgListener)
{
   bufferedRecordMesgBroadcaster.AddListener(bufferedRecordMesgListener);
}

void MesgBroadcaster::RemoveListener(BufferedRecordMesgListener& bufferedRecordMesgListener)
{
   bufferedRecordMesgBroadcaster.RemoveListener(bufferedRecordMesgListener);
}

void MesgBroadcaster::AddListener(FileIdMesgListener& fileIdMesgListener)
{
   fileIdMesgListeners.push_back(&fileIdMesgListener);
}

void MesgBroadcaster::RemoveListener(FileIdMesgListener& fileIdMesgListener)
{
   std::vector<FileIdMesgListener *>::iterator it = std::find(fileIdMesgListeners.begin(), fileIdMesgListeners.end(), &fileIdMesgListener);
   if (fileIdMesgListeners.end() != it)
      fileIdMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(FileCreatorMesgListener& fileCreatorMesgListener)
{
   fileCreatorMesgListeners.push_back(&fileCreatorMesgListener);
}

void MesgBroadcaster::RemoveListener(FileCreatorMesgListener& fileCreatorMesgListener)
{
   std::vector<FileCreatorMesgListener *>::iterator it = std::find(fileCreatorMesgListeners.begin(), fileCreatorMesgListeners.end(), &fileCreatorMesgListener);
   if (fileCreatorMesgListeners.end() != it)
      fileCreatorMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(SoftwareMesgListener& softwareMesgListener)
{
   softwareMesgListeners.push_back(&softwareMesgListener);
}

void MesgBroadcaster::RemoveListener(SoftwareMesgListener& softwareMesgListener)
{
   std::vector<SoftwareMesgListener *>::iterator it = std::find(softwareMesgListeners.begin(), softwareMesgListeners.end(), &softwareMesgListener);
   if (softwareMesgListeners.end() != it)
      softwareMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(SlaveDeviceMesgListener& slaveDeviceMesgListener)
{
   slaveDeviceMesgListeners.push_back(&slaveDeviceMesgListener);
}

void MesgBroadcaster::RemoveListener(SlaveDeviceMesgListener& slaveDeviceMesgListener)
{
   std::vector<SlaveDeviceMesgListener *>::iterator it = std::find(slaveDeviceMesgListeners.begin(), slaveDeviceMesgListeners.end(), &slaveDeviceMesgListener);
   if (slaveDeviceMesgListeners.end() != it)
      slaveDeviceMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(CapabilitiesMesgListener& capabilitiesMesgListener)
{
   capabilitiesMesgListeners.push_back(&capabilitiesMesgListener);
}

void MesgBroadcaster::RemoveListener(CapabilitiesMesgListener& capabilitiesMesgListener)
{
   std::vector<CapabilitiesMesgListener *>::iterator it = std::find(capabilitiesMesgListeners.begin(), capabilitiesMesgListeners.end(), &capabilitiesMesgListener);
   if (capabilitiesMesgListeners.end() != it)
      capabilitiesMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(FileCapabilitiesMesgListener& fileCapabilitiesMesgListener)
{
   fileCapabilitiesMesgListeners.push_back(&fileCapabilitiesMesgListener);
}

void MesgBroadcaster::RemoveListener(FileCapabilitiesMesgListener& fileCapabilitiesMesgListener)
{
   std::vector<FileCapabilitiesMesgListener *>::iterator it = std::find(fileCapabilitiesMesgListeners.begin(), fileCapabilitiesMesgListeners.end(), &fileCapabilitiesMesgListener);
   if (fileCapabilitiesMesgListeners.end() != it)
      fileCapabilitiesMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(MesgCapabilitiesMesgListener& mesgCapabilitiesMesgListener)
{
   mesgCapabilitiesMesgListeners.push_back(&mesgCapabilitiesMesgListener);
}

void MesgBroadcaster::RemoveListener(MesgCapabilitiesMesgListener& mesgCapabilitiesMesgListener)
{
   std::vector<MesgCapabilitiesMesgListener *>::iterator it = std::find(mesgCapabilitiesMesgListeners.begin(), mesgCapabilitiesMesgListeners.end(), &mesgCapabilitiesMesgListener);
   if (mesgCapabilitiesMesgListeners.end() != it)
      mesgCapabilitiesMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(FieldCapabilitiesMesgListener& fieldCapabilitiesMesgListener)
{
   fieldCapabilitiesMesgListeners.push_back(&fieldCapabilitiesMesgListener);
}

void MesgBroadcaster::RemoveListener(FieldCapabilitiesMesgListener& fieldCapabilitiesMesgListener)
{
   std::vector<FieldCapabilitiesMesgListener *>::iterator it = std::find(fieldCapabilitiesMesgListeners.begin(), fieldCapabilitiesMesgListeners.end(), &fieldCapabilitiesMesgListener);
   if (fieldCapabilitiesMesgListeners.end() != it)
      fieldCapabilitiesMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(DeviceSettingsMesgListener& deviceSettingsMesgListener)
{
   deviceSettingsMesgListeners.push_back(&deviceSettingsMesgListener);
}

void MesgBroadcaster::RemoveListener(DeviceSettingsMesgListener& deviceSettingsMesgListener)
{
   std::vector<DeviceSettingsMesgListener *>::iterator it = std::find(deviceSettingsMesgListeners.begin(), deviceSettingsMesgListeners.end(), &deviceSettingsMesgListener);
   if (deviceSettingsMesgListeners.end() != it)
      deviceSettingsMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(UserProfileMesgListener& userProfileMesgListener)
{
   userProfileMesgListeners.push_back(&userProfileMesgListener);
}

void MesgBroadcaster::RemoveListener(UserProfileMesgListener& userProfileMesgListener)
{
   std::vector<UserProfileMesgListener *>::iterator it = std::find(userProfileMesgListeners.begin(), userProfileMesgListeners.end(), &userProfileMesgListener);
   if (userProfileMesgListeners.end() != it)
      userProfileMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(HrmProfileMesgListener& hrmProfileMesgListener)
{
   hrmProfileMesgListeners.push_back(&hrmProfileMesgListener);
}

void MesgBroadcaster::RemoveListener(HrmProfileMesgListener& hrmProfileMesgListener)
{
   std::vector<HrmProfileMesgListener *>::iterator it = std::find(hrmProfileMesgListeners.begin(), hrmProfileMesgListeners.end(), &hrmProfileMesgListener);
   if (hrmProfileMesgListeners.end() != it)
      hrmProfileMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(SdmProfileMesgListener& sdmProfileMesgListener)
{
   sdmProfileMesgListeners.push_back(&sdmProfileMesgListener);
}

void MesgBroadcaster::RemoveListener(SdmProfileMesgListener& sdmProfileMesgListener)
{
   std::vector<SdmProfileMesgListener *>::iterator it = std::find(sdmProfileMesgListeners.begin(), sdmProfileMesgListeners.end(), &sdmProfileMesgListener);
   if (sdmProfileMesgListeners.end() != it)
      sdmProfileMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(BikeProfileMesgListener& bikeProfileMesgListener)
{
   bikeProfileMesgListeners.push_back(&bikeProfileMesgListener);
}

void MesgBroadcaster::RemoveListener(BikeProfileMesgListener& bikeProfileMesgListener)
{
   std::vector<BikeProfileMesgListener *>::iterator it = std::find(bikeProfileMesgListeners.begin(), bikeProfileMesgListeners.end(), &bikeProfileMesgListener);
   if (bikeProfileMesgListeners.end() != it)
      bikeProfileMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(ZonesTargetMesgListener& zonesTargetMesgListener)
{
   zonesTargetMesgListeners.push_back(&zonesTargetMesgListener);
}

void MesgBroadcaster::RemoveListener(ZonesTargetMesgListener& zonesTargetMesgListener)
{
   std::vector<ZonesTargetMesgListener *>::iterator it = std::find(zonesTargetMesgListeners.begin(), zonesTargetMesgListeners.end(), &zonesTargetMesgListener);
   if (zonesTargetMesgListeners.end() != it)
      zonesTargetMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(SportMesgListener& sportMesgListener)
{
   sportMesgListeners.push_back(&sportMesgListener);
}

void MesgBroadcaster::RemoveListener(SportMesgListener& sportMesgListener)
{
   std::vector<SportMesgListener *>::iterator it = std::find(sportMesgListeners.begin(), sportMesgListeners.end(), &sportMesgListener);
   if (sportMesgListeners.end() != it)
      sportMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(HrZoneMesgListener& hrZoneMesgListener)
{
   hrZoneMesgListeners.push_back(&hrZoneMesgListener);
}

void MesgBroadcaster::RemoveListener(HrZoneMesgListener& hrZoneMesgListener)
{
   std::vector<HrZoneMesgListener *>::iterator it = std::find(hrZoneMesgListeners.begin(), hrZoneMesgListeners.end(), &hrZoneMesgListener);
   if (hrZoneMesgListeners.end() != it)
      hrZoneMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(SpeedZoneMesgListener& speedZoneMesgListener)
{
   speedZoneMesgListeners.push_back(&speedZoneMesgListener);
}

void MesgBroadcaster::RemoveListener(SpeedZoneMesgListener& speedZoneMesgListener)
{
   std::vector<SpeedZoneMesgListener *>::iterator it = std::find(speedZoneMesgListeners.begin(), speedZoneMesgListeners.end(), &speedZoneMesgListener);
   if (speedZoneMesgListeners.end() != it)
      speedZoneMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(CadenceZoneMesgListener& cadenceZoneMesgListener)
{
   cadenceZoneMesgListeners.push_back(&cadenceZoneMesgListener);
}

void MesgBroadcaster::RemoveListener(CadenceZoneMesgListener& cadenceZoneMesgListener)
{
   std::vector<CadenceZoneMesgListener *>::iterator it = std::find(cadenceZoneMesgListeners.begin(), cadenceZoneMesgListeners.end(), &cadenceZoneMesgListener);
   if (cadenceZoneMesgListeners.end() != it)
      cadenceZoneMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(PowerZoneMesgListener& powerZoneMesgListener)
{
   powerZoneMesgListeners.push_back(&powerZoneMesgListener);
}

void MesgBroadcaster::RemoveListener(PowerZoneMesgListener& powerZoneMesgListener)
{
   std::vector<PowerZoneMesgListener *>::iterator it = std::find(powerZoneMesgListeners.begin(), powerZoneMesgListeners.end(), &powerZoneMesgListener);
   if (powerZoneMesgListeners.end() != it)
      powerZoneMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(MetZoneMesgListener& metZoneMesgListener)
{
   metZoneMesgListeners.push_back(&metZoneMesgListener);
}

void MesgBroadcaster::RemoveListener(MetZoneMesgListener& metZoneMesgListener)
{
   std::vector<MetZoneMesgListener *>::iterator it = std::find(metZoneMesgListeners.begin(), metZoneMesgListeners.end(), &metZoneMesgListener);
   if (metZoneMesgListeners.end() != it)
      metZoneMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(GoalMesgListener& goalMesgListener)
{
   goalMesgListeners.push_back(&goalMesgListener);
}

void MesgBroadcaster::RemoveListener(GoalMesgListener& goalMesgListener)
{
   std::vector<GoalMesgListener *>::iterator it = std::find(goalMesgListeners.begin(), goalMesgListeners.end(), &goalMesgListener);
   if (goalMesgListeners.end() != it)
      goalMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(ActivityMesgListener& activityMesgListener)
{
   activityMesgListeners.push_back(&activityMesgListener);
}

void MesgBroadcaster::RemoveListener(ActivityMesgListener& activityMesgListener)
{
   std::vector<ActivityMesgListener *>::iterator it = std::find(activityMesgListeners.begin(), activityMesgListeners.end(), &activityMesgListener);
   if (activityMesgListeners.end() != it)
      activityMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(SessionMesgListener& sessionMesgListener)
{
   sessionMesgListeners.push_back(&sessionMesgListener);
}

void MesgBroadcaster::RemoveListener(SessionMesgListener& sessionMesgListener)
{
   std::vector<SessionMesgListener *>::iterator it = std::find(sessionMesgListeners.begin(), sessionMesgListeners.end(), &sessionMesgListener);
   if (sessionMesgListeners.end() != it)
      sessionMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(LapMesgListener& lapMesgListener)
{
   lapMesgListeners.push_back(&lapMesgListener);
}

void MesgBroadcaster::RemoveListener(LapMesgListener& lapMesgListener)
{
   std::vector<LapMesgListener *>::iterator it = std::find(lapMesgListeners.begin(), lapMesgListeners.end(), &lapMesgListener);
   if (lapMesgListeners.end() != it)
      lapMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(LengthMesgListener& lengthMesgListener)
{
   lengthMesgListeners.push_back(&lengthMesgListener);
}

void MesgBroadcaster::RemoveListener(LengthMesgListener& lengthMesgListener)
{
   std::vector<LengthMesgListener *>::iterator it = std::find(lengthMesgListeners.begin(), lengthMesgListeners.end(), &lengthMesgListener);
   if (lengthMesgListeners.end() != it)
      lengthMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(RecordMesgListener& recordMesgListener)
{
   recordMesgListeners.push_back(&recordMesgListener);
}

void MesgBroadcaster::RemoveListener(RecordMesgListener& recordMesgListener)
{
   std::vector<RecordMesgListener *>::iterator it = std::find(recordMesgListeners.begin(), recordMesgListeners.end(), &recordMesgListener);
   if (recordMesgListeners.end() != it)
      recordMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(EventMesgListener& eventMesgListener)
{
   eventMesgListeners.push_back(&eventMesgListener);
}

void MesgBroadcaster::RemoveListener(EventMesgListener& eventMesgListener)
{
   std::vector<EventMesgListener *>::iterator it = std::find(eventMesgListeners.begin(), eventMesgListeners.end(), &eventMesgListener);
   if (eventMesgListeners.end() != it)
      eventMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(DeviceInfoMesgListener& deviceInfoMesgListener)
{
   deviceInfoMesgListeners.push_back(&deviceInfoMesgListener);
}

void MesgBroadcaster::RemoveListener(DeviceInfoMesgListener& deviceInfoMesgListener)
{
   std::vector<DeviceInfoMesgListener *>::iterator it = std::find(deviceInfoMesgListeners.begin(), deviceInfoMesgListeners.end(), &deviceInfoMesgListener);
   if (deviceInfoMesgListeners.end() != it)
      deviceInfoMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(TrainingFileMesgListener& trainingFileMesgListener)
{
   trainingFileMesgListeners.push_back(&trainingFileMesgListener);
}

void MesgBroadcaster::RemoveListener(TrainingFileMesgListener& trainingFileMesgListener)
{
   std::vector<TrainingFileMesgListener *>::iterator it = std::find(trainingFileMesgListeners.begin(), trainingFileMesgListeners.end(), &trainingFileMesgListener);
   if (trainingFileMesgListeners.end() != it)
      trainingFileMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(HrvMesgListener& hrvMesgListener)
{
   hrvMesgListeners.push_back(&hrvMesgListener);
}

void MesgBroadcaster::RemoveListener(HrvMesgListener& hrvMesgListener)
{
   std::vector<HrvMesgListener *>::iterator it = std::find(hrvMesgListeners.begin(), hrvMesgListeners.end(), &hrvMesgListener);
   if (hrvMesgListeners.end() != it)
      hrvMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(CourseMesgListener& courseMesgListener)
{
   courseMesgListeners.push_back(&courseMesgListener);
}

void MesgBroadcaster::RemoveListener(CourseMesgListener& courseMesgListener)
{
   std::vector<CourseMesgListener *>::iterator it = std::find(courseMesgListeners.begin(), courseMesgListeners.end(), &courseMesgListener);
   if (courseMesgListeners.end() != it)
      courseMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(CoursePointMesgListener& coursePointMesgListener)
{
   coursePointMesgListeners.push_back(&coursePointMesgListener);
}

void MesgBroadcaster::RemoveListener(CoursePointMesgListener& coursePointMesgListener)
{
   std::vector<CoursePointMesgListener *>::iterator it = std::find(coursePointMesgListeners.begin(), coursePointMesgListeners.end(), &coursePointMesgListener);
   if (coursePointMesgListeners.end() != it)
      coursePointMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(SegmentIdMesgListener& segmentIdMesgListener)
{
   segmentIdMesgListeners.push_back(&segmentIdMesgListener);
}

void MesgBroadcaster::RemoveListener(SegmentIdMesgListener& segmentIdMesgListener)
{
   std::vector<SegmentIdMesgListener *>::iterator it = std::find(segmentIdMesgListeners.begin(), segmentIdMesgListeners.end(), &segmentIdMesgListener);
   if (segmentIdMesgListeners.end() != it)
      segmentIdMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(SegmentLeaderboardEntryMesgListener& segmentLeaderboardEntryMesgListener)
{
   segmentLeaderboardEntryMesgListeners.push_back(&segmentLeaderboardEntryMesgListener);
}

void MesgBroadcaster::RemoveListener(SegmentLeaderboardEntryMesgListener& segmentLeaderboardEntryMesgListener)
{
   std::vector<SegmentLeaderboardEntryMesgListener *>::iterator it = std::find(segmentLeaderboardEntryMesgListeners.begin(), segmentLeaderboardEntryMesgListeners.end(), &segmentLeaderboardEntryMesgListener);
   if (segmentLeaderboardEntryMesgListeners.end() != it)
      segmentLeaderboardEntryMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(SegmentPointMesgListener& segmentPointMesgListener)
{
   segmentPointMesgListeners.push_back(&segmentPointMesgListener);
}

void MesgBroadcaster::RemoveListener(SegmentPointMesgListener& segmentPointMesgListener)
{
   std::vector<SegmentPointMesgListener *>::iterator it = std::find(segmentPointMesgListeners.begin(), segmentPointMesgListeners.end(), &segmentPointMesgListener);
   if (segmentPointMesgListeners.end() != it)
      segmentPointMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(SegmentLapMesgListener& segmentLapMesgListener)
{
   segmentLapMesgListeners.push_back(&segmentLapMesgListener);
}

void MesgBroadcaster::RemoveListener(SegmentLapMesgListener& segmentLapMesgListener)
{
   std::vector<SegmentLapMesgListener *>::iterator it = std::find(segmentLapMesgListeners.begin(), segmentLapMesgListeners.end(), &segmentLapMesgListener);
   if (segmentLapMesgListeners.end() != it)
      segmentLapMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(SegmentFileMesgListener& segmentFileMesgListener)
{
   segmentFileMesgListeners.push_back(&segmentFileMesgListener);
}

void MesgBroadcaster::RemoveListener(SegmentFileMesgListener& segmentFileMesgListener)
{
   std::vector<SegmentFileMesgListener *>::iterator it = std::find(segmentFileMesgListeners.begin(), segmentFileMesgListeners.end(), &segmentFileMesgListener);
   if (segmentFileMesgListeners.end() != it)
      segmentFileMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(WorkoutMesgListener& workoutMesgListener)
{
   workoutMesgListeners.push_back(&workoutMesgListener);
}

void MesgBroadcaster::RemoveListener(WorkoutMesgListener& workoutMesgListener)
{
   std::vector<WorkoutMesgListener *>::iterator it = std::find(workoutMesgListeners.begin(), workoutMesgListeners.end(), &workoutMesgListener);
   if (workoutMesgListeners.end() != it)
      workoutMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(WorkoutStepMesgListener& workoutStepMesgListener)
{
   workoutStepMesgListeners.push_back(&workoutStepMesgListener);
}

void MesgBroadcaster::RemoveListener(WorkoutStepMesgListener& workoutStepMesgListener)
{
   std::vector<WorkoutStepMesgListener *>::iterator it = std::find(workoutStepMesgListeners.begin(), workoutStepMesgListeners.end(), &workoutStepMesgListener);
   if (workoutStepMesgListeners.end() != it)
      workoutStepMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(ScheduleMesgListener& scheduleMesgListener)
{
   scheduleMesgListeners.push_back(&scheduleMesgListener);
}

void MesgBroadcaster::RemoveListener(ScheduleMesgListener& scheduleMesgListener)
{
   std::vector<ScheduleMesgListener *>::iterator it = std::find(scheduleMesgListeners.begin(), scheduleMesgListeners.end(), &scheduleMesgListener);
   if (scheduleMesgListeners.end() != it)
      scheduleMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(TotalsMesgListener& totalsMesgListener)
{
   totalsMesgListeners.push_back(&totalsMesgListener);
}

void MesgBroadcaster::RemoveListener(TotalsMesgListener& totalsMesgListener)
{
   std::vector<TotalsMesgListener *>::iterator it = std::find(totalsMesgListeners.begin(), totalsMesgListeners.end(), &totalsMesgListener);
   if (totalsMesgListeners.end() != it)
      totalsMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(WeightScaleMesgListener& weightScaleMesgListener)
{
   weightScaleMesgListeners.push_back(&weightScaleMesgListener);
}

void MesgBroadcaster::RemoveListener(WeightScaleMesgListener& weightScaleMesgListener)
{
   std::vector<WeightScaleMesgListener *>::iterator it = std::find(weightScaleMesgListeners.begin(), weightScaleMesgListeners.end(), &weightScaleMesgListener);
   if (weightScaleMesgListeners.end() != it)
      weightScaleMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(BloodPressureMesgListener& bloodPressureMesgListener)
{
   bloodPressureMesgListeners.push_back(&bloodPressureMesgListener);
}

void MesgBroadcaster::RemoveListener(BloodPressureMesgListener& bloodPressureMesgListener)
{
   std::vector<BloodPressureMesgListener *>::iterator it = std::find(bloodPressureMesgListeners.begin(), bloodPressureMesgListeners.end(), &bloodPressureMesgListener);
   if (bloodPressureMesgListeners.end() != it)
      bloodPressureMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(MonitoringInfoMesgListener& monitoringInfoMesgListener)
{
   monitoringInfoMesgListeners.push_back(&monitoringInfoMesgListener);
}

void MesgBroadcaster::RemoveListener(MonitoringInfoMesgListener& monitoringInfoMesgListener)
{
   std::vector<MonitoringInfoMesgListener *>::iterator it = std::find(monitoringInfoMesgListeners.begin(), monitoringInfoMesgListeners.end(), &monitoringInfoMesgListener);
   if (monitoringInfoMesgListeners.end() != it)
      monitoringInfoMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(MonitoringMesgListener& monitoringMesgListener)
{
   monitoringMesgListeners.push_back(&monitoringMesgListener);
}

void MesgBroadcaster::RemoveListener(MonitoringMesgListener& monitoringMesgListener)
{
   std::vector<MonitoringMesgListener *>::iterator it = std::find(monitoringMesgListeners.begin(), monitoringMesgListeners.end(), &monitoringMesgListener);
   if (monitoringMesgListeners.end() != it)
      monitoringMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(MemoGlobMesgListener& memoGlobMesgListener)
{
   memoGlobMesgListeners.push_back(&memoGlobMesgListener);
}

void MesgBroadcaster::RemoveListener(MemoGlobMesgListener& memoGlobMesgListener)
{
   std::vector<MemoGlobMesgListener *>::iterator it = std::find(memoGlobMesgListeners.begin(), memoGlobMesgListeners.end(), &memoGlobMesgListener);
   if (memoGlobMesgListeners.end() != it)
      memoGlobMesgListeners.erase(it);
}


void MesgBroadcaster::AddListener(PadMesgListener& padMesgListener)
{
   padMesgListeners.push_back(&padMesgListener);
}

void MesgBroadcaster::RemoveListener(PadMesgListener& padMesgListener)
{
   std::vector<PadMesgListener *>::iterator it = std::find(padMesgListeners.begin(), padMesgListeners.end(), &padMesgListener);
   if (padMesgListeners.end() != it)
      padMesgListeners.erase(it);
}



void MesgBroadcaster::OnMesg(Mesg& mesg)
{
   for (int i=0; i < (int)mesgListeners.size(); i++)
      mesgListeners[i]->OnMesg(mesg);

   switch (mesg.GetNum())
   {
      case FIT_MESG_NUM_FILE_ID:
      {
         FileIdMesg fileIdMesg(mesg);
         for (int i=0; i < (int)fileIdMesgListeners.size(); i++)
            fileIdMesgListeners[i]->OnMesg(fileIdMesg);
         break;
      }
      case FIT_MESG_NUM_FILE_CREATOR:
      {
         FileCreatorMesg fileCreatorMesg(mesg);
         for (int i=0; i < (int)fileCreatorMesgListeners.size(); i++)
            fileCreatorMesgListeners[i]->OnMesg(fileCreatorMesg);
         break;
      }
      case FIT_MESG_NUM_SOFTWARE:
      {
         SoftwareMesg softwareMesg(mesg);
         for (int i=0; i < (int)softwareMesgListeners.size(); i++)
            softwareMesgListeners[i]->OnMesg(softwareMesg);
         break;
      }
      case FIT_MESG_NUM_SLAVE_DEVICE:
      {
         SlaveDeviceMesg slaveDeviceMesg(mesg);
         for (int i=0; i < (int)slaveDeviceMesgListeners.size(); i++)
            slaveDeviceMesgListeners[i]->OnMesg(slaveDeviceMesg);
         break;
      }
      case FIT_MESG_NUM_CAPABILITIES:
      {
         CapabilitiesMesg capabilitiesMesg(mesg);
         for (int i=0; i < (int)capabilitiesMesgListeners.size(); i++)
            capabilitiesMesgListeners[i]->OnMesg(capabilitiesMesg);
         break;
      }
      case FIT_MESG_NUM_FILE_CAPABILITIES:
      {
         FileCapabilitiesMesg fileCapabilitiesMesg(mesg);
         for (int i=0; i < (int)fileCapabilitiesMesgListeners.size(); i++)
            fileCapabilitiesMesgListeners[i]->OnMesg(fileCapabilitiesMesg);
         break;
      }
      case FIT_MESG_NUM_MESG_CAPABILITIES:
      {
         MesgCapabilitiesMesg mesgCapabilitiesMesg(mesg);
         for (int i=0; i < (int)mesgCapabilitiesMesgListeners.size(); i++)
            mesgCapabilitiesMesgListeners[i]->OnMesg(mesgCapabilitiesMesg);
         break;
      }
      case FIT_MESG_NUM_FIELD_CAPABILITIES:
      {
         FieldCapabilitiesMesg fieldCapabilitiesMesg(mesg);
         for (int i=0; i < (int)fieldCapabilitiesMesgListeners.size(); i++)
            fieldCapabilitiesMesgListeners[i]->OnMesg(fieldCapabilitiesMesg);
         break;
      }
      case FIT_MESG_NUM_DEVICE_SETTINGS:
      {
         DeviceSettingsMesg deviceSettingsMesg(mesg);
         for (int i=0; i < (int)deviceSettingsMesgListeners.size(); i++)
            deviceSettingsMesgListeners[i]->OnMesg(deviceSettingsMesg);
         break;
      }
      case FIT_MESG_NUM_USER_PROFILE:
      {
         UserProfileMesg userProfileMesg(mesg);
         for (int i=0; i < (int)userProfileMesgListeners.size(); i++)
            userProfileMesgListeners[i]->OnMesg(userProfileMesg);
         break;
      }
      case FIT_MESG_NUM_HRM_PROFILE:
      {
         HrmProfileMesg hrmProfileMesg(mesg);
         for (int i=0; i < (int)hrmProfileMesgListeners.size(); i++)
            hrmProfileMesgListeners[i]->OnMesg(hrmProfileMesg);
         break;
      }
      case FIT_MESG_NUM_SDM_PROFILE:
      {
         SdmProfileMesg sdmProfileMesg(mesg);
         for (int i=0; i < (int)sdmProfileMesgListeners.size(); i++)
            sdmProfileMesgListeners[i]->OnMesg(sdmProfileMesg);
         break;
      }
      case FIT_MESG_NUM_BIKE_PROFILE:
      {
         BikeProfileMesg bikeProfileMesg(mesg);
         for (int i=0; i < (int)bikeProfileMesgListeners.size(); i++)
            bikeProfileMesgListeners[i]->OnMesg(bikeProfileMesg);
         break;
      }
      case FIT_MESG_NUM_ZONES_TARGET:
      {
         ZonesTargetMesg zonesTargetMesg(mesg);
         for (int i=0; i < (int)zonesTargetMesgListeners.size(); i++)
            zonesTargetMesgListeners[i]->OnMesg(zonesTargetMesg);
         break;
      }
      case FIT_MESG_NUM_SPORT:
      {
         SportMesg sportMesg(mesg);
         for (int i=0; i < (int)sportMesgListeners.size(); i++)
            sportMesgListeners[i]->OnMesg(sportMesg);
         break;
      }
      case FIT_MESG_NUM_HR_ZONE:
      {
         HrZoneMesg hrZoneMesg(mesg);
         for (int i=0; i < (int)hrZoneMesgListeners.size(); i++)
            hrZoneMesgListeners[i]->OnMesg(hrZoneMesg);
         break;
      }
      case FIT_MESG_NUM_SPEED_ZONE:
      {
         SpeedZoneMesg speedZoneMesg(mesg);
         for (int i=0; i < (int)speedZoneMesgListeners.size(); i++)
            speedZoneMesgListeners[i]->OnMesg(speedZoneMesg);
         break;
      }
      case FIT_MESG_NUM_CADENCE_ZONE:
      {
         CadenceZoneMesg cadenceZoneMesg(mesg);
         for (int i=0; i < (int)cadenceZoneMesgListeners.size(); i++)
            cadenceZoneMesgListeners[i]->OnMesg(cadenceZoneMesg);
         break;
      }
      case FIT_MESG_NUM_POWER_ZONE:
      {
         PowerZoneMesg powerZoneMesg(mesg);
         for (int i=0; i < (int)powerZoneMesgListeners.size(); i++)
            powerZoneMesgListeners[i]->OnMesg(powerZoneMesg);
         break;
      }
      case FIT_MESG_NUM_MET_ZONE:
      {
         MetZoneMesg metZoneMesg(mesg);
         for (int i=0; i < (int)metZoneMesgListeners.size(); i++)
            metZoneMesgListeners[i]->OnMesg(metZoneMesg);
         break;
      }
      case FIT_MESG_NUM_GOAL:
      {
         GoalMesg goalMesg(mesg);
         for (int i=0; i < (int)goalMesgListeners.size(); i++)
            goalMesgListeners[i]->OnMesg(goalMesg);
         break;
      }
      case FIT_MESG_NUM_ACTIVITY:
      {
         ActivityMesg activityMesg(mesg);
         for (int i=0; i < (int)activityMesgListeners.size(); i++)
            activityMesgListeners[i]->OnMesg(activityMesg);
         mesgWithEventBroadcaster.OnMesg(activityMesg);
         break;
      }
      case FIT_MESG_NUM_SESSION:
      {
         SessionMesg sessionMesg(mesg);
         for (int i=0; i < (int)sessionMesgListeners.size(); i++)
            sessionMesgListeners[i]->OnMesg(sessionMesg);
         mesgWithEventBroadcaster.OnMesg(sessionMesg);
         break;
      }
      case FIT_MESG_NUM_LAP:
      {
         LapMesg lapMesg(mesg);
         for (int i=0; i < (int)lapMesgListeners.size(); i++)
            lapMesgListeners[i]->OnMesg(lapMesg);
         mesgWithEventBroadcaster.OnMesg(lapMesg);
         break;
      }
      case FIT_MESG_NUM_LENGTH:
      {
         LengthMesg lengthMesg(mesg);
         for (int i=0; i < (int)lengthMesgListeners.size(); i++)
            lengthMesgListeners[i]->OnMesg(lengthMesg);
         mesgWithEventBroadcaster.OnMesg(lengthMesg);
         break;
      }
      case FIT_MESG_NUM_RECORD:
      {
         RecordMesg recordMesg(mesg);
         for (int i=0; i < (int)recordMesgListeners.size(); i++)
            recordMesgListeners[i]->OnMesg(recordMesg);
         bufferedRecordMesgBroadcaster.OnMesg(recordMesg);
         break;
      }
      case FIT_MESG_NUM_EVENT:
      {
         EventMesg eventMesg(mesg);
         for (int i=0; i < (int)eventMesgListeners.size(); i++)
            eventMesgListeners[i]->OnMesg(eventMesg);
         mesgWithEventBroadcaster.OnMesg(eventMesg);
         break;
      }
      case FIT_MESG_NUM_DEVICE_INFO:
      {
         DeviceInfoMesg deviceInfoMesg(mesg);
         for (int i=0; i < (int)deviceInfoMesgListeners.size(); i++)
            deviceInfoMesgListeners[i]->OnMesg(deviceInfoMesg);
         break;
      }
      case FIT_MESG_NUM_TRAINING_FILE:
      {
         TrainingFileMesg trainingFileMesg(mesg);
         for (int i=0; i < (int)trainingFileMesgListeners.size(); i++)
            trainingFileMesgListeners[i]->OnMesg(trainingFileMesg);
         break;
      }
      case FIT_MESG_NUM_HRV:
      {
         HrvMesg hrvMesg(mesg);
         for (int i=0; i < (int)hrvMesgListeners.size(); i++)
            hrvMesgListeners[i]->OnMesg(hrvMesg);
         break;
      }
      case FIT_MESG_NUM_COURSE:
      {
         CourseMesg courseMesg(mesg);
         for (int i=0; i < (int)courseMesgListeners.size(); i++)
            courseMesgListeners[i]->OnMesg(courseMesg);
         break;
      }
      case FIT_MESG_NUM_COURSE_POINT:
      {
         CoursePointMesg coursePointMesg(mesg);
         for (int i=0; i < (int)coursePointMesgListeners.size(); i++)
            coursePointMesgListeners[i]->OnMesg(coursePointMesg);
         break;
      }
      case FIT_MESG_NUM_SEGMENT_ID:
      {
         SegmentIdMesg segmentIdMesg(mesg);
         for (int i=0; i < (int)segmentIdMesgListeners.size(); i++)
            segmentIdMesgListeners[i]->OnMesg(segmentIdMesg);
         break;
      }
      case FIT_MESG_NUM_SEGMENT_LEADERBOARD_ENTRY:
      {
         SegmentLeaderboardEntryMesg segmentLeaderboardEntryMesg(mesg);
         for (int i=0; i < (int)segmentLeaderboardEntryMesgListeners.size(); i++)
            segmentLeaderboardEntryMesgListeners[i]->OnMesg(segmentLeaderboardEntryMesg);
         break;
      }
      case FIT_MESG_NUM_SEGMENT_POINT:
      {
         SegmentPointMesg segmentPointMesg(mesg);
         for (int i=0; i < (int)segmentPointMesgListeners.size(); i++)
            segmentPointMesgListeners[i]->OnMesg(segmentPointMesg);
         break;
      }
      case FIT_MESG_NUM_SEGMENT_LAP:
      {
         SegmentLapMesg segmentLapMesg(mesg);
         for (int i=0; i < (int)segmentLapMesgListeners.size(); i++)
            segmentLapMesgListeners[i]->OnMesg(segmentLapMesg);
         mesgWithEventBroadcaster.OnMesg(segmentLapMesg);
         break;
      }
      case FIT_MESG_NUM_SEGMENT_FILE:
      {
         SegmentFileMesg segmentFileMesg(mesg);
         for (int i=0; i < (int)segmentFileMesgListeners.size(); i++)
            segmentFileMesgListeners[i]->OnMesg(segmentFileMesg);
         break;
      }
      case FIT_MESG_NUM_WORKOUT:
      {
         WorkoutMesg workoutMesg(mesg);
         for (int i=0; i < (int)workoutMesgListeners.size(); i++)
            workoutMesgListeners[i]->OnMesg(workoutMesg);
         break;
      }
      case FIT_MESG_NUM_WORKOUT_STEP:
      {
         WorkoutStepMesg workoutStepMesg(mesg);
         for (int i=0; i < (int)workoutStepMesgListeners.size(); i++)
            workoutStepMesgListeners[i]->OnMesg(workoutStepMesg);
         break;
      }
      case FIT_MESG_NUM_SCHEDULE:
      {
         ScheduleMesg scheduleMesg(mesg);
         for (int i=0; i < (int)scheduleMesgListeners.size(); i++)
            scheduleMesgListeners[i]->OnMesg(scheduleMesg);
         break;
      }
      case FIT_MESG_NUM_TOTALS:
      {
         TotalsMesg totalsMesg(mesg);
         for (int i=0; i < (int)totalsMesgListeners.size(); i++)
            totalsMesgListeners[i]->OnMesg(totalsMesg);
         break;
      }
      case FIT_MESG_NUM_WEIGHT_SCALE:
      {
         WeightScaleMesg weightScaleMesg(mesg);
         for (int i=0; i < (int)weightScaleMesgListeners.size(); i++)
            weightScaleMesgListeners[i]->OnMesg(weightScaleMesg);
         break;
      }
      case FIT_MESG_NUM_BLOOD_PRESSURE:
      {
         BloodPressureMesg bloodPressureMesg(mesg);
         for (int i=0; i < (int)bloodPressureMesgListeners.size(); i++)
            bloodPressureMesgListeners[i]->OnMesg(bloodPressureMesg);
         break;
      }
      case FIT_MESG_NUM_MONITORING_INFO:
      {
         MonitoringInfoMesg monitoringInfoMesg(mesg);
         for (int i=0; i < (int)monitoringInfoMesgListeners.size(); i++)
            monitoringInfoMesgListeners[i]->OnMesg(monitoringInfoMesg);
         break;
      }
      case FIT_MESG_NUM_MONITORING:
      {
         MonitoringMesg monitoringMesg(mesg);
         for (int i=0; i < (int)monitoringMesgListeners.size(); i++)
            monitoringMesgListeners[i]->OnMesg(monitoringMesg);
         break;
      }
      case FIT_MESG_NUM_MEMO_GLOB:
      {
         MemoGlobMesg memoGlobMesg(mesg);
         for (int i=0; i < (int)memoGlobMesgListeners.size(); i++)
            memoGlobMesgListeners[i]->OnMesg(memoGlobMesg);
         break;
      }
      case FIT_MESG_NUM_PAD:
      {
         PadMesg padMesg(mesg);
         for (int i=0; i < (int)padMesgListeners.size(); i++)
            padMesgListeners[i]->OnMesg(padMesg);
         break;
      }

      default:
         break;
   }
}

void MesgBroadcaster::OnMesgDefinition(MesgDefinition& mesgDef)
{
   for (int i=0; i < (int)mesgDefinitionListeners.size(); i++)
      mesgDefinitionListeners[i]->OnMesgDefinition(mesgDef);
}

} // namespace fit

